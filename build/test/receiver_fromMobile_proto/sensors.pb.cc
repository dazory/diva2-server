// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sensors.proto

#include "sensors.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace sensors {
constexpr Gps::Gps(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : gpgga_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , timestamp_(nullptr)
  , latitude_(0)
  , longitude_(0)
  , isnorth_(false)
  , iseast_(false)
  , gpsquality_(0)
  , horizontaldilutionofprecision_(0)
  , antennaaltitudemeters_(0)
  , numberofsatellitesinuse_(0)
  , differentialreferencestationid_(0)
  , geoidalseparationmeters_(0)
  , ageofdifferentialgpsdataseconds_(0){}
struct GpsDefaultTypeInternal {
  constexpr GpsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GpsDefaultTypeInternal() {}
  union {
    Gps _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GpsDefaultTypeInternal _Gps_default_instance_;
constexpr Imu::Imu(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : timestamp_(nullptr)
  , scaledaccelx_(0)
  , scaledaccely_(0)
  , scaledaccelz_(0)
  , scaledgyrox_(0)
  , scaledgyroy_(0)
  , scaledgyroz_(0)
  , scaledmagx_(0)
  , scaledmagy_(0)
  , scaledmagz_(0)
  , estroll_(0)
  , estpitch_(0)
  , estyaw_(0)
  , estrolluncert_(0)
  , estpitchuncert_(0)
  , estyawuncert_(0){}
struct ImuDefaultTypeInternal {
  constexpr ImuDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ImuDefaultTypeInternal() {}
  union {
    Imu _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ImuDefaultTypeInternal _Imu_default_instance_;
constexpr Cam::Cam(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : red_data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , green_data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , blue_data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , image_data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , timestamp_(nullptr)
  , type_(0)
  , width_(0)
  , height_(0){}
struct CamDefaultTypeInternal {
  constexpr CamDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CamDefaultTypeInternal() {}
  union {
    Cam _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CamDefaultTypeInternal _Cam_default_instance_;
constexpr Lidar::Lidar(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : timestamp_(nullptr){}
struct LidarDefaultTypeInternal {
  constexpr LidarDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LidarDefaultTypeInternal() {}
  union {
    Lidar _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LidarDefaultTypeInternal _Lidar_default_instance_;
constexpr Can::Can(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : timestamp_(nullptr){}
struct CanDefaultTypeInternal {
  constexpr CanDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CanDefaultTypeInternal() {}
  union {
    Can _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CanDefaultTypeInternal _Can_default_instance_;
}  // namespace sensors
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_sensors_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_sensors_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_sensors_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_sensors_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::sensors::Gps, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::sensors::Gps, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sensors::Gps, timestamp_),
  PROTOBUF_FIELD_OFFSET(::sensors::Gps, gpgga_),
  PROTOBUF_FIELD_OFFSET(::sensors::Gps, latitude_),
  PROTOBUF_FIELD_OFFSET(::sensors::Gps, isnorth_),
  PROTOBUF_FIELD_OFFSET(::sensors::Gps, longitude_),
  PROTOBUF_FIELD_OFFSET(::sensors::Gps, iseast_),
  PROTOBUF_FIELD_OFFSET(::sensors::Gps, gpsquality_),
  PROTOBUF_FIELD_OFFSET(::sensors::Gps, numberofsatellitesinuse_),
  PROTOBUF_FIELD_OFFSET(::sensors::Gps, horizontaldilutionofprecision_),
  PROTOBUF_FIELD_OFFSET(::sensors::Gps, antennaaltitudemeters_),
  PROTOBUF_FIELD_OFFSET(::sensors::Gps, geoidalseparationmeters_),
  PROTOBUF_FIELD_OFFSET(::sensors::Gps, ageofdifferentialgpsdataseconds_),
  PROTOBUF_FIELD_OFFSET(::sensors::Gps, differentialreferencestationid_),
  ~0u,
  ~0u,
  0,
  2,
  1,
  3,
  4,
  7,
  5,
  6,
  9,
  10,
  8,
  PROTOBUF_FIELD_OFFSET(::sensors::Imu, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::sensors::Imu, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sensors::Imu, timestamp_),
  PROTOBUF_FIELD_OFFSET(::sensors::Imu, scaledaccelx_),
  PROTOBUF_FIELD_OFFSET(::sensors::Imu, scaledaccely_),
  PROTOBUF_FIELD_OFFSET(::sensors::Imu, scaledaccelz_),
  PROTOBUF_FIELD_OFFSET(::sensors::Imu, scaledgyrox_),
  PROTOBUF_FIELD_OFFSET(::sensors::Imu, scaledgyroy_),
  PROTOBUF_FIELD_OFFSET(::sensors::Imu, scaledgyroz_),
  PROTOBUF_FIELD_OFFSET(::sensors::Imu, scaledmagx_),
  PROTOBUF_FIELD_OFFSET(::sensors::Imu, scaledmagy_),
  PROTOBUF_FIELD_OFFSET(::sensors::Imu, scaledmagz_),
  PROTOBUF_FIELD_OFFSET(::sensors::Imu, estroll_),
  PROTOBUF_FIELD_OFFSET(::sensors::Imu, estpitch_),
  PROTOBUF_FIELD_OFFSET(::sensors::Imu, estyaw_),
  PROTOBUF_FIELD_OFFSET(::sensors::Imu, estrolluncert_),
  PROTOBUF_FIELD_OFFSET(::sensors::Imu, estpitchuncert_),
  PROTOBUF_FIELD_OFFSET(::sensors::Imu, estyawuncert_),
  ~0u,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensors::Cam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sensors::Cam, timestamp_),
  PROTOBUF_FIELD_OFFSET(::sensors::Cam, type_),
  PROTOBUF_FIELD_OFFSET(::sensors::Cam, width_),
  PROTOBUF_FIELD_OFFSET(::sensors::Cam, height_),
  PROTOBUF_FIELD_OFFSET(::sensors::Cam, red_data_),
  PROTOBUF_FIELD_OFFSET(::sensors::Cam, green_data_),
  PROTOBUF_FIELD_OFFSET(::sensors::Cam, blue_data_),
  PROTOBUF_FIELD_OFFSET(::sensors::Cam, image_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensors::Lidar, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sensors::Lidar, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensors::Can, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sensors::Can, timestamp_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 18, sizeof(::sensors::Gps)},
  { 31, 52, sizeof(::sensors::Imu)},
  { 68, -1, sizeof(::sensors::Cam)},
  { 81, -1, sizeof(::sensors::Lidar)},
  { 87, -1, sizeof(::sensors::Can)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensors::_Gps_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensors::_Imu_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensors::_Cam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensors::_Lidar_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensors::_Can_default_instance_),
};

const char descriptor_table_protodef_sensors_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rsensors.proto\022\007sensors\032\037google/protobu"
  "f/timestamp.proto\"\251\005\n\003Gps\022-\n\ttimestamp\030\001"
  " \001(\0132\032.google.protobuf.Timestamp\022\r\n\005gpgg"
  "a\030\002 \001(\t\022\025\n\010latitude\030\003 \001(\001H\000\210\001\001\022\024\n\007isNort"
  "h\030\004 \001(\010H\001\210\001\001\022\026\n\tlongitude\030\005 \001(\001H\002\210\001\001\022\023\n\006"
  "isEast\030\006 \001(\010H\003\210\001\001\022\027\n\ngpsQuality\030\007 \001(\005H\004\210"
  "\001\001\022$\n\027numberOfSatellitesInUse\030\010 \001(\005H\005\210\001\001"
  "\022*\n\035horizontalDilutionOfPrecision\030\t \001(\001H"
  "\006\210\001\001\022\"\n\025antennaAltitudeMeters\030\n \001(\001H\007\210\001\001"
  "\022$\n\027geoidalSeparationMeters\030\013 \001(\001H\010\210\001\001\022,"
  "\n\037ageOfDifferentialGPSDataSeconds\030\014 \001(\001H"
  "\t\210\001\001\022+\n\036differentialReferenceStationID\030\r"
  " \001(\005H\n\210\001\001B\013\n\t_latitudeB\n\n\010_isNorthB\014\n\n_l"
  "ongitudeB\t\n\007_isEastB\r\n\013_gpsQualityB\032\n\030_n"
  "umberOfSatellitesInUseB \n\036_horizontalDil"
  "utionOfPrecisionB\030\n\026_antennaAltitudeMete"
  "rsB\032\n\030_geoidalSeparationMetersB\"\n _ageOf"
  "DifferentialGPSDataSecondsB!\n\037_different"
  "ialReferenceStationID\"\236\005\n\003Imu\022-\n\ttimesta"
  "mp\030\001 \001(\0132\032.google.protobuf.Timestamp\022\031\n\014"
  "scaledAccelX\030\002 \001(\002H\000\210\001\001\022\031\n\014scaledAccelY\030"
  "\003 \001(\002H\001\210\001\001\022\031\n\014scaledAccelZ\030\004 \001(\002H\002\210\001\001\022\030\n"
  "\013scaledGyroX\030\005 \001(\002H\003\210\001\001\022\030\n\013scaledGyroY\030\006"
  " \001(\002H\004\210\001\001\022\030\n\013scaledGyroZ\030\007 \001(\002H\005\210\001\001\022\027\n\ns"
  "caledMagX\030\010 \001(\002H\006\210\001\001\022\027\n\nscaledMagY\030\t \001(\002"
  "H\007\210\001\001\022\027\n\nscaledMagZ\030\n \001(\002H\010\210\001\001\022\024\n\007estRol"
  "l\030\013 \001(\002H\t\210\001\001\022\025\n\010estPitch\030\014 \001(\002H\n\210\001\001\022\023\n\006e"
  "stYaw\030\r \001(\002H\013\210\001\001\022\032\n\restRollUncert\030\016 \001(\002H"
  "\014\210\001\001\022\033\n\016estPitchUncert\030\017 \001(\002H\r\210\001\001\022\031\n\014est"
  "YawUncert\030\020 \001(\002H\016\210\001\001B\017\n\r_scaledAccelXB\017\n"
  "\r_scaledAccelYB\017\n\r_scaledAccelZB\016\n\014_scal"
  "edGyroXB\016\n\014_scaledGyroYB\016\n\014_scaledGyroZB"
  "\r\n\013_scaledMagXB\r\n\013_scaledMagYB\r\n\013_scaled"
  "MagZB\n\n\010_estRollB\013\n\t_estPitchB\t\n\007_estYaw"
  "B\020\n\016_estRollUncertB\021\n\017_estPitchUncertB\017\n"
  "\r_estYawUncert\"\256\001\n\003Cam\022-\n\ttimestamp\030\001 \001("
  "\0132\032.google.protobuf.Timestamp\022\014\n\004type\030\002 "
  "\001(\005\022\r\n\005width\030\003 \001(\005\022\016\n\006height\030\004 \001(\005\022\020\n\010re"
  "d_data\030\005 \001(\014\022\022\n\ngreen_data\030\006 \001(\014\022\021\n\tblue"
  "_data\030\007 \001(\014\022\022\n\nimage_data\030\010 \001(\014\"6\n\005Lidar"
  "\022-\n\ttimestamp\030\001 \001(\0132\032.google.protobuf.Ti"
  "mestamp\"4\n\003Can\022-\n\ttimestamp\030\001 \001(\0132\032.goog"
  "le.protobuf.Timestampb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_sensors_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_sensors_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sensors_2eproto = {
  false, false, 1709, descriptor_table_protodef_sensors_2eproto, "sensors.proto", 
  &descriptor_table_sensors_2eproto_once, descriptor_table_sensors_2eproto_deps, 1, 5,
  schemas, file_default_instances, TableStruct_sensors_2eproto::offsets,
  file_level_metadata_sensors_2eproto, file_level_enum_descriptors_sensors_2eproto, file_level_service_descriptors_sensors_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_sensors_2eproto_getter() {
  return &descriptor_table_sensors_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_sensors_2eproto(&descriptor_table_sensors_2eproto);
namespace sensors {

// ===================================================================

class Gps::_Internal {
 public:
  using HasBits = decltype(std::declval<Gps>()._has_bits_);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const Gps* msg);
  static void set_has_latitude(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_isnorth(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_longitude(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_iseast(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_gpsquality(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_numberofsatellitesinuse(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_horizontaldilutionofprecision(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_antennaaltitudemeters(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_geoidalseparationmeters(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_ageofdifferentialgpsdataseconds(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_differentialreferencestationid(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
Gps::_Internal::timestamp(const Gps* msg) {
  return *msg->timestamp_;
}
void Gps::clear_timestamp() {
  if (GetArena() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
}
Gps::Gps(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensors.Gps)
}
Gps::Gps(const Gps& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  gpgga_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_gpgga().empty()) {
    gpgga_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_gpgga(), 
      GetArena());
  }
  if (from._internal_has_timestamp()) {
    timestamp_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = nullptr;
  }
  ::memcpy(&latitude_, &from.latitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&ageofdifferentialgpsdataseconds_) -
    reinterpret_cast<char*>(&latitude_)) + sizeof(ageofdifferentialgpsdataseconds_));
  // @@protoc_insertion_point(copy_constructor:sensors.Gps)
}

void Gps::SharedCtor() {
gpgga_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&timestamp_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ageofdifferentialgpsdataseconds_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(ageofdifferentialgpsdataseconds_));
}

Gps::~Gps() {
  // @@protoc_insertion_point(destructor:sensors.Gps)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Gps::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  gpgga_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete timestamp_;
}

void Gps::ArenaDtor(void* object) {
  Gps* _this = reinterpret_cast< Gps* >(object);
  (void)_this;
}
void Gps::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Gps::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Gps::Clear() {
// @@protoc_insertion_point(message_clear_start:sensors.Gps)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gpgga_.ClearToEmpty();
  if (GetArena() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&latitude_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&numberofsatellitesinuse_) -
        reinterpret_cast<char*>(&latitude_)) + sizeof(numberofsatellitesinuse_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&differentialreferencestationid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ageofdifferentialgpsdataseconds_) -
        reinterpret_cast<char*>(&differentialreferencestationid_)) + sizeof(ageofdifferentialgpsdataseconds_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Gps::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string gpgga = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_gpgga();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sensors.Gps.gpgga"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double latitude = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_latitude(&has_bits);
          latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // bool isNorth = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_isnorth(&has_bits);
          isnorth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double longitude = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_longitude(&has_bits);
          longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // bool isEast = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_iseast(&has_bits);
          iseast_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 gpsQuality = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_gpsquality(&has_bits);
          gpsquality_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 numberOfSatellitesInUse = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_numberofsatellitesinuse(&has_bits);
          numberofsatellitesinuse_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double horizontalDilutionOfPrecision = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          _Internal::set_has_horizontaldilutionofprecision(&has_bits);
          horizontaldilutionofprecision_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double antennaAltitudeMeters = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          _Internal::set_has_antennaaltitudemeters(&has_bits);
          antennaaltitudemeters_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double geoidalSeparationMeters = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          _Internal::set_has_geoidalseparationmeters(&has_bits);
          geoidalseparationmeters_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double ageOfDifferentialGPSDataSeconds = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          _Internal::set_has_ageofdifferentialgpsdataseconds(&has_bits);
          ageofdifferentialgpsdataseconds_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 differentialReferenceStationID = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_differentialreferencestationid(&has_bits);
          differentialreferencestationid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Gps::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensors.Gps)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp timestamp = 1;
  if (this->has_timestamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::timestamp(this), target, stream);
  }

  // string gpgga = 2;
  if (this->gpgga().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_gpgga().data(), static_cast<int>(this->_internal_gpgga().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sensors.Gps.gpgga");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_gpgga(), target);
  }

  // double latitude = 3;
  if (_internal_has_latitude()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_latitude(), target);
  }

  // bool isNorth = 4;
  if (_internal_has_isnorth()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_isnorth(), target);
  }

  // double longitude = 5;
  if (_internal_has_longitude()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_longitude(), target);
  }

  // bool isEast = 6;
  if (_internal_has_iseast()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_iseast(), target);
  }

  // int32 gpsQuality = 7;
  if (_internal_has_gpsquality()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_gpsquality(), target);
  }

  // int32 numberOfSatellitesInUse = 8;
  if (_internal_has_numberofsatellitesinuse()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_numberofsatellitesinuse(), target);
  }

  // double horizontalDilutionOfPrecision = 9;
  if (_internal_has_horizontaldilutionofprecision()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_horizontaldilutionofprecision(), target);
  }

  // double antennaAltitudeMeters = 10;
  if (_internal_has_antennaaltitudemeters()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_antennaaltitudemeters(), target);
  }

  // double geoidalSeparationMeters = 11;
  if (_internal_has_geoidalseparationmeters()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_geoidalseparationmeters(), target);
  }

  // double ageOfDifferentialGPSDataSeconds = 12;
  if (_internal_has_ageofdifferentialgpsdataseconds()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_ageofdifferentialgpsdataseconds(), target);
  }

  // int32 differentialReferenceStationID = 13;
  if (_internal_has_differentialreferencestationid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_differentialreferencestationid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensors.Gps)
  return target;
}

size_t Gps::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensors.Gps)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string gpgga = 2;
  if (this->gpgga().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_gpgga());
  }

  // .google.protobuf.Timestamp timestamp = 1;
  if (this->has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // double latitude = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // double longitude = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // bool isNorth = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // bool isEast = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // int32 gpsQuality = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_gpsquality());
    }

    // double horizontalDilutionOfPrecision = 9;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // double antennaAltitudeMeters = 10;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // int32 numberOfSatellitesInUse = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_numberofsatellitesinuse());
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // int32 differentialReferenceStationID = 13;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_differentialreferencestationid());
    }

    // double geoidalSeparationMeters = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // double ageOfDifferentialGPSDataSeconds = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Gps::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensors.Gps)
  GOOGLE_DCHECK_NE(&from, this);
  const Gps* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Gps>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensors.Gps)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensors.Gps)
    MergeFrom(*source);
  }
}

void Gps::MergeFrom(const Gps& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensors.Gps)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gpgga().size() > 0) {
    _internal_set_gpgga(from._internal_gpgga());
  }
  if (from.has_timestamp()) {
    _internal_mutable_timestamp()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_timestamp());
  }
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      latitude_ = from.latitude_;
    }
    if (cached_has_bits & 0x00000002u) {
      longitude_ = from.longitude_;
    }
    if (cached_has_bits & 0x00000004u) {
      isnorth_ = from.isnorth_;
    }
    if (cached_has_bits & 0x00000008u) {
      iseast_ = from.iseast_;
    }
    if (cached_has_bits & 0x00000010u) {
      gpsquality_ = from.gpsquality_;
    }
    if (cached_has_bits & 0x00000020u) {
      horizontaldilutionofprecision_ = from.horizontaldilutionofprecision_;
    }
    if (cached_has_bits & 0x00000040u) {
      antennaaltitudemeters_ = from.antennaaltitudemeters_;
    }
    if (cached_has_bits & 0x00000080u) {
      numberofsatellitesinuse_ = from.numberofsatellitesinuse_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      differentialreferencestationid_ = from.differentialreferencestationid_;
    }
    if (cached_has_bits & 0x00000200u) {
      geoidalseparationmeters_ = from.geoidalseparationmeters_;
    }
    if (cached_has_bits & 0x00000400u) {
      ageofdifferentialgpsdataseconds_ = from.ageofdifferentialgpsdataseconds_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Gps::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensors.Gps)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Gps::CopyFrom(const Gps& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensors.Gps)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Gps::IsInitialized() const {
  return true;
}

void Gps::InternalSwap(Gps* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  gpgga_.Swap(&other->gpgga_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Gps, ageofdifferentialgpsdataseconds_)
      + sizeof(Gps::ageofdifferentialgpsdataseconds_)
      - PROTOBUF_FIELD_OFFSET(Gps, timestamp_)>(
          reinterpret_cast<char*>(&timestamp_),
          reinterpret_cast<char*>(&other->timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Gps::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sensors_2eproto_getter, &descriptor_table_sensors_2eproto_once,
      file_level_metadata_sensors_2eproto[0]);
}

// ===================================================================

class Imu::_Internal {
 public:
  using HasBits = decltype(std::declval<Imu>()._has_bits_);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const Imu* msg);
  static void set_has_scaledaccelx(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_scaledaccely(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_scaledaccelz(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_scaledgyrox(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_scaledgyroy(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_scaledgyroz(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_scaledmagx(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_scaledmagy(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_scaledmagz(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_estroll(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_estpitch(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_estyaw(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_estrolluncert(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_estpitchuncert(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_estyawuncert(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
Imu::_Internal::timestamp(const Imu* msg) {
  return *msg->timestamp_;
}
void Imu::clear_timestamp() {
  if (GetArena() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
}
Imu::Imu(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensors.Imu)
}
Imu::Imu(const Imu& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_timestamp()) {
    timestamp_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = nullptr;
  }
  ::memcpy(&scaledaccelx_, &from.scaledaccelx_,
    static_cast<size_t>(reinterpret_cast<char*>(&estyawuncert_) -
    reinterpret_cast<char*>(&scaledaccelx_)) + sizeof(estyawuncert_));
  // @@protoc_insertion_point(copy_constructor:sensors.Imu)
}

void Imu::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&timestamp_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&estyawuncert_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(estyawuncert_));
}

Imu::~Imu() {
  // @@protoc_insertion_point(destructor:sensors.Imu)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Imu::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete timestamp_;
}

void Imu::ArenaDtor(void* object) {
  Imu* _this = reinterpret_cast< Imu* >(object);
  (void)_this;
}
void Imu::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Imu::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Imu::Clear() {
// @@protoc_insertion_point(message_clear_start:sensors.Imu)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&scaledaccelx_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&scaledmagy_) -
        reinterpret_cast<char*>(&scaledaccelx_)) + sizeof(scaledmagy_));
  }
  if (cached_has_bits & 0x00007f00u) {
    ::memset(&scaledmagz_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&estyawuncert_) -
        reinterpret_cast<char*>(&scaledmagz_)) + sizeof(estyawuncert_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Imu::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float scaledAccelX = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_scaledaccelx(&has_bits);
          scaledaccelx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float scaledAccelY = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_scaledaccely(&has_bits);
          scaledaccely_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float scaledAccelZ = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_scaledaccelz(&has_bits);
          scaledaccelz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float scaledGyroX = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_scaledgyrox(&has_bits);
          scaledgyrox_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float scaledGyroY = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_scaledgyroy(&has_bits);
          scaledgyroy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float scaledGyroZ = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_scaledgyroz(&has_bits);
          scaledgyroz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float scaledMagX = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_scaledmagx(&has_bits);
          scaledmagx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float scaledMagY = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_scaledmagy(&has_bits);
          scaledmagy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float scaledMagZ = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_scaledmagz(&has_bits);
          scaledmagz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float estRoll = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          _Internal::set_has_estroll(&has_bits);
          estroll_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float estPitch = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          _Internal::set_has_estpitch(&has_bits);
          estpitch_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float estYaw = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          _Internal::set_has_estyaw(&has_bits);
          estyaw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float estRollUncert = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          _Internal::set_has_estrolluncert(&has_bits);
          estrolluncert_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float estPitchUncert = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 125)) {
          _Internal::set_has_estpitchuncert(&has_bits);
          estpitchuncert_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float estYawUncert = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 133)) {
          _Internal::set_has_estyawuncert(&has_bits);
          estyawuncert_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Imu::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensors.Imu)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp timestamp = 1;
  if (this->has_timestamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::timestamp(this), target, stream);
  }

  // float scaledAccelX = 2;
  if (_internal_has_scaledaccelx()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_scaledaccelx(), target);
  }

  // float scaledAccelY = 3;
  if (_internal_has_scaledaccely()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_scaledaccely(), target);
  }

  // float scaledAccelZ = 4;
  if (_internal_has_scaledaccelz()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_scaledaccelz(), target);
  }

  // float scaledGyroX = 5;
  if (_internal_has_scaledgyrox()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_scaledgyrox(), target);
  }

  // float scaledGyroY = 6;
  if (_internal_has_scaledgyroy()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_scaledgyroy(), target);
  }

  // float scaledGyroZ = 7;
  if (_internal_has_scaledgyroz()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_scaledgyroz(), target);
  }

  // float scaledMagX = 8;
  if (_internal_has_scaledmagx()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_scaledmagx(), target);
  }

  // float scaledMagY = 9;
  if (_internal_has_scaledmagy()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_scaledmagy(), target);
  }

  // float scaledMagZ = 10;
  if (_internal_has_scaledmagz()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_scaledmagz(), target);
  }

  // float estRoll = 11;
  if (_internal_has_estroll()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_estroll(), target);
  }

  // float estPitch = 12;
  if (_internal_has_estpitch()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->_internal_estpitch(), target);
  }

  // float estYaw = 13;
  if (_internal_has_estyaw()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(13, this->_internal_estyaw(), target);
  }

  // float estRollUncert = 14;
  if (_internal_has_estrolluncert()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(14, this->_internal_estrolluncert(), target);
  }

  // float estPitchUncert = 15;
  if (_internal_has_estpitchuncert()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(15, this->_internal_estpitchuncert(), target);
  }

  // float estYawUncert = 16;
  if (_internal_has_estyawuncert()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(16, this->_internal_estyawuncert(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensors.Imu)
  return target;
}

size_t Imu::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensors.Imu)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Timestamp timestamp = 1;
  if (this->has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // float scaledAccelX = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // float scaledAccelY = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // float scaledAccelZ = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // float scaledGyroX = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // float scaledGyroY = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // float scaledGyroZ = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // float scaledMagX = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // float scaledMagY = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x00007f00u) {
    // float scaledMagZ = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 4;
    }

    // float estRoll = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 4;
    }

    // float estPitch = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 4;
    }

    // float estYaw = 13;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 4;
    }

    // float estRollUncert = 14;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 4;
    }

    // float estPitchUncert = 15;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 4;
    }

    // float estYawUncert = 16;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Imu::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensors.Imu)
  GOOGLE_DCHECK_NE(&from, this);
  const Imu* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Imu>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensors.Imu)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensors.Imu)
    MergeFrom(*source);
  }
}

void Imu::MergeFrom(const Imu& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensors.Imu)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_timestamp()) {
    _internal_mutable_timestamp()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_timestamp());
  }
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      scaledaccelx_ = from.scaledaccelx_;
    }
    if (cached_has_bits & 0x00000002u) {
      scaledaccely_ = from.scaledaccely_;
    }
    if (cached_has_bits & 0x00000004u) {
      scaledaccelz_ = from.scaledaccelz_;
    }
    if (cached_has_bits & 0x00000008u) {
      scaledgyrox_ = from.scaledgyrox_;
    }
    if (cached_has_bits & 0x00000010u) {
      scaledgyroy_ = from.scaledgyroy_;
    }
    if (cached_has_bits & 0x00000020u) {
      scaledgyroz_ = from.scaledgyroz_;
    }
    if (cached_has_bits & 0x00000040u) {
      scaledmagx_ = from.scaledmagx_;
    }
    if (cached_has_bits & 0x00000080u) {
      scaledmagy_ = from.scaledmagy_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      scaledmagz_ = from.scaledmagz_;
    }
    if (cached_has_bits & 0x00000200u) {
      estroll_ = from.estroll_;
    }
    if (cached_has_bits & 0x00000400u) {
      estpitch_ = from.estpitch_;
    }
    if (cached_has_bits & 0x00000800u) {
      estyaw_ = from.estyaw_;
    }
    if (cached_has_bits & 0x00001000u) {
      estrolluncert_ = from.estrolluncert_;
    }
    if (cached_has_bits & 0x00002000u) {
      estpitchuncert_ = from.estpitchuncert_;
    }
    if (cached_has_bits & 0x00004000u) {
      estyawuncert_ = from.estyawuncert_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Imu::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensors.Imu)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Imu::CopyFrom(const Imu& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensors.Imu)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Imu::IsInitialized() const {
  return true;
}

void Imu::InternalSwap(Imu* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Imu, estyawuncert_)
      + sizeof(Imu::estyawuncert_)
      - PROTOBUF_FIELD_OFFSET(Imu, timestamp_)>(
          reinterpret_cast<char*>(&timestamp_),
          reinterpret_cast<char*>(&other->timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Imu::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sensors_2eproto_getter, &descriptor_table_sensors_2eproto_once,
      file_level_metadata_sensors_2eproto[1]);
}

// ===================================================================

class Cam::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const Cam* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
Cam::_Internal::timestamp(const Cam* msg) {
  return *msg->timestamp_;
}
void Cam::clear_timestamp() {
  if (GetArena() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
}
Cam::Cam(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensors.Cam)
}
Cam::Cam(const Cam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  red_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_red_data().empty()) {
    red_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_red_data(), 
      GetArena());
  }
  green_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_green_data().empty()) {
    green_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_green_data(), 
      GetArena());
  }
  blue_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_blue_data().empty()) {
    blue_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_blue_data(), 
      GetArena());
  }
  image_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_image_data().empty()) {
    image_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_image_data(), 
      GetArena());
  }
  if (from._internal_has_timestamp()) {
    timestamp_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = nullptr;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&type_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:sensors.Cam)
}

void Cam::SharedCtor() {
red_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
green_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
blue_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
image_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&timestamp_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(height_));
}

Cam::~Cam() {
  // @@protoc_insertion_point(destructor:sensors.Cam)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Cam::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  red_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  green_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  blue_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  image_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete timestamp_;
}

void Cam::ArenaDtor(void* object) {
  Cam* _this = reinterpret_cast< Cam* >(object);
  (void)_this;
}
void Cam::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Cam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Cam::Clear() {
// @@protoc_insertion_point(message_clear_start:sensors.Cam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  red_data_.ClearToEmpty();
  green_data_.ClearToEmpty();
  blue_data_.ClearToEmpty();
  image_data_.ClearToEmpty();
  if (GetArena() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&type_)) + sizeof(height_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Cam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 width = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 height = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes red_data = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_red_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes green_data = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_green_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes blue_data = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_blue_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes image_data = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_image_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Cam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensors.Cam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp timestamp = 1;
  if (this->has_timestamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::timestamp(this), target, stream);
  }

  // int32 type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_type(), target);
  }

  // int32 width = 3;
  if (this->width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_width(), target);
  }

  // int32 height = 4;
  if (this->height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_height(), target);
  }

  // bytes red_data = 5;
  if (this->red_data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_red_data(), target);
  }

  // bytes green_data = 6;
  if (this->green_data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_green_data(), target);
  }

  // bytes blue_data = 7;
  if (this->blue_data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_blue_data(), target);
  }

  // bytes image_data = 8;
  if (this->image_data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_image_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensors.Cam)
  return target;
}

size_t Cam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensors.Cam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes red_data = 5;
  if (this->red_data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_red_data());
  }

  // bytes green_data = 6;
  if (this->green_data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_green_data());
  }

  // bytes blue_data = 7;
  if (this->blue_data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_blue_data());
  }

  // bytes image_data = 8;
  if (this->image_data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_image_data());
  }

  // .google.protobuf.Timestamp timestamp = 1;
  if (this->has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  // int32 type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  // int32 width = 3;
  if (this->width() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_width());
  }

  // int32 height = 4;
  if (this->height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_height());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Cam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensors.Cam)
  GOOGLE_DCHECK_NE(&from, this);
  const Cam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Cam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensors.Cam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensors.Cam)
    MergeFrom(*source);
  }
}

void Cam::MergeFrom(const Cam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensors.Cam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.red_data().size() > 0) {
    _internal_set_red_data(from._internal_red_data());
  }
  if (from.green_data().size() > 0) {
    _internal_set_green_data(from._internal_green_data());
  }
  if (from.blue_data().size() > 0) {
    _internal_set_blue_data(from._internal_blue_data());
  }
  if (from.image_data().size() > 0) {
    _internal_set_image_data(from._internal_image_data());
  }
  if (from.has_timestamp()) {
    _internal_mutable_timestamp()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_timestamp());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.width() != 0) {
    _internal_set_width(from._internal_width());
  }
  if (from.height() != 0) {
    _internal_set_height(from._internal_height());
  }
}

void Cam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensors.Cam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Cam::CopyFrom(const Cam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensors.Cam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Cam::IsInitialized() const {
  return true;
}

void Cam::InternalSwap(Cam* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  red_data_.Swap(&other->red_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  green_data_.Swap(&other->green_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  blue_data_.Swap(&other->blue_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  image_data_.Swap(&other->image_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Cam, height_)
      + sizeof(Cam::height_)
      - PROTOBUF_FIELD_OFFSET(Cam, timestamp_)>(
          reinterpret_cast<char*>(&timestamp_),
          reinterpret_cast<char*>(&other->timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Cam::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sensors_2eproto_getter, &descriptor_table_sensors_2eproto_once,
      file_level_metadata_sensors_2eproto[2]);
}

// ===================================================================

class Lidar::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const Lidar* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
Lidar::_Internal::timestamp(const Lidar* msg) {
  return *msg->timestamp_;
}
void Lidar::clear_timestamp() {
  if (GetArena() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
}
Lidar::Lidar(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensors.Lidar)
}
Lidar::Lidar(const Lidar& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_timestamp()) {
    timestamp_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:sensors.Lidar)
}

void Lidar::SharedCtor() {
timestamp_ = nullptr;
}

Lidar::~Lidar() {
  // @@protoc_insertion_point(destructor:sensors.Lidar)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Lidar::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete timestamp_;
}

void Lidar::ArenaDtor(void* object) {
  Lidar* _this = reinterpret_cast< Lidar* >(object);
  (void)_this;
}
void Lidar::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Lidar::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Lidar::Clear() {
// @@protoc_insertion_point(message_clear_start:sensors.Lidar)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Lidar::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Lidar::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensors.Lidar)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp timestamp = 1;
  if (this->has_timestamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::timestamp(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensors.Lidar)
  return target;
}

size_t Lidar::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensors.Lidar)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Timestamp timestamp = 1;
  if (this->has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Lidar::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensors.Lidar)
  GOOGLE_DCHECK_NE(&from, this);
  const Lidar* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Lidar>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensors.Lidar)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensors.Lidar)
    MergeFrom(*source);
  }
}

void Lidar::MergeFrom(const Lidar& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensors.Lidar)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_timestamp()) {
    _internal_mutable_timestamp()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_timestamp());
  }
}

void Lidar::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensors.Lidar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Lidar::CopyFrom(const Lidar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensors.Lidar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Lidar::IsInitialized() const {
  return true;
}

void Lidar::InternalSwap(Lidar* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(timestamp_, other->timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Lidar::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sensors_2eproto_getter, &descriptor_table_sensors_2eproto_once,
      file_level_metadata_sensors_2eproto[3]);
}

// ===================================================================

class Can::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const Can* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
Can::_Internal::timestamp(const Can* msg) {
  return *msg->timestamp_;
}
void Can::clear_timestamp() {
  if (GetArena() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
}
Can::Can(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sensors.Can)
}
Can::Can(const Can& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_timestamp()) {
    timestamp_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:sensors.Can)
}

void Can::SharedCtor() {
timestamp_ = nullptr;
}

Can::~Can() {
  // @@protoc_insertion_point(destructor:sensors.Can)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Can::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete timestamp_;
}

void Can::ArenaDtor(void* object) {
  Can* _this = reinterpret_cast< Can* >(object);
  (void)_this;
}
void Can::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Can::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Can::Clear() {
// @@protoc_insertion_point(message_clear_start:sensors.Can)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Can::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Can::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensors.Can)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp timestamp = 1;
  if (this->has_timestamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::timestamp(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensors.Can)
  return target;
}

size_t Can::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensors.Can)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Timestamp timestamp = 1;
  if (this->has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Can::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sensors.Can)
  GOOGLE_DCHECK_NE(&from, this);
  const Can* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Can>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sensors.Can)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sensors.Can)
    MergeFrom(*source);
  }
}

void Can::MergeFrom(const Can& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensors.Can)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_timestamp()) {
    _internal_mutable_timestamp()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_timestamp());
  }
}

void Can::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sensors.Can)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Can::CopyFrom(const Can& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensors.Can)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Can::IsInitialized() const {
  return true;
}

void Can::InternalSwap(Can* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(timestamp_, other->timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Can::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sensors_2eproto_getter, &descriptor_table_sensors_2eproto_once,
      file_level_metadata_sensors_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace sensors
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sensors::Gps* Arena::CreateMaybeMessage< ::sensors::Gps >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensors::Gps >(arena);
}
template<> PROTOBUF_NOINLINE ::sensors::Imu* Arena::CreateMaybeMessage< ::sensors::Imu >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensors::Imu >(arena);
}
template<> PROTOBUF_NOINLINE ::sensors::Cam* Arena::CreateMaybeMessage< ::sensors::Cam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensors::Cam >(arena);
}
template<> PROTOBUF_NOINLINE ::sensors::Lidar* Arena::CreateMaybeMessage< ::sensors::Lidar >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensors::Lidar >(arena);
}
template<> PROTOBUF_NOINLINE ::sensors::Can* Arena::CreateMaybeMessage< ::sensors::Can >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensors::Can >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
